// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package servicemanager

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SMServiceClient is the client API for SMService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SMServiceClient interface {
	// Board config
	GetBoardConfigStatus(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*BoardConfigStatus, error)
	CheckBoardConfig(ctx context.Context, in *BoardConfig, opts ...grpc.CallOption) (*BoardConfigStatus, error)
	SetBoardConfig(ctx context.Context, in *BoardConfig, opts ...grpc.CallOption) (*empty.Empty, error)
	// Services
	GetServicesStatus(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ServicesStatus, error)
	InstallService(ctx context.Context, in *InstallServiceRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	RunServices(ctx context.Context, in *RunServicesRequest, opts ...grpc.CallOption) (*RunServicesStatus, error)
	GetInstancesStatus(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*InstancesStatus, error)
	ServiceStateAcceptance(ctx context.Context, in *StateAcceptance, opts ...grpc.CallOption) (*empty.Empty, error)
	SetServiceState(ctx context.Context, in *ServiceState, opts ...grpc.CallOption) (*empty.Empty, error)
	OverrideEnvVars(ctx context.Context, in *OverrideEnvVarsRequest, opts ...grpc.CallOption) (*OverrideEnvVarStatus, error)
	// Layers
	GetLayersStatus(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*LayersStatus, error)
	InstallLayer(ctx context.Context, in *InstallLayerRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Notifications
	SubscribeSMNotifications(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (SMService_SubscribeSMNotificationsClient, error)
	// Logs
	GetSystemLog(ctx context.Context, in *SystemLogRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	GetServiceLog(ctx context.Context, in *ServiceLogRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	GetServiceCrashLog(ctx context.Context, in *ServiceLogRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type sMServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSMServiceClient(cc grpc.ClientConnInterface) SMServiceClient {
	return &sMServiceClient{cc}
}

func (c *sMServiceClient) GetBoardConfigStatus(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*BoardConfigStatus, error) {
	out := new(BoardConfigStatus)
	err := c.cc.Invoke(ctx, "/servicemanager.v2.SMService/GetBoardConfigStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sMServiceClient) CheckBoardConfig(ctx context.Context, in *BoardConfig, opts ...grpc.CallOption) (*BoardConfigStatus, error) {
	out := new(BoardConfigStatus)
	err := c.cc.Invoke(ctx, "/servicemanager.v2.SMService/CheckBoardConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sMServiceClient) SetBoardConfig(ctx context.Context, in *BoardConfig, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/servicemanager.v2.SMService/SetBoardConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sMServiceClient) GetServicesStatus(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ServicesStatus, error) {
	out := new(ServicesStatus)
	err := c.cc.Invoke(ctx, "/servicemanager.v2.SMService/GetServicesStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sMServiceClient) InstallService(ctx context.Context, in *InstallServiceRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/servicemanager.v2.SMService/InstallService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sMServiceClient) RunServices(ctx context.Context, in *RunServicesRequest, opts ...grpc.CallOption) (*RunServicesStatus, error) {
	out := new(RunServicesStatus)
	err := c.cc.Invoke(ctx, "/servicemanager.v2.SMService/RunServices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sMServiceClient) GetInstancesStatus(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*InstancesStatus, error) {
	out := new(InstancesStatus)
	err := c.cc.Invoke(ctx, "/servicemanager.v2.SMService/GetInstancesStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sMServiceClient) ServiceStateAcceptance(ctx context.Context, in *StateAcceptance, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/servicemanager.v2.SMService/ServiceStateAcceptance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sMServiceClient) SetServiceState(ctx context.Context, in *ServiceState, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/servicemanager.v2.SMService/SetServiceState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sMServiceClient) OverrideEnvVars(ctx context.Context, in *OverrideEnvVarsRequest, opts ...grpc.CallOption) (*OverrideEnvVarStatus, error) {
	out := new(OverrideEnvVarStatus)
	err := c.cc.Invoke(ctx, "/servicemanager.v2.SMService/OverrideEnvVars", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sMServiceClient) GetLayersStatus(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*LayersStatus, error) {
	out := new(LayersStatus)
	err := c.cc.Invoke(ctx, "/servicemanager.v2.SMService/GetLayersStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sMServiceClient) InstallLayer(ctx context.Context, in *InstallLayerRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/servicemanager.v2.SMService/InstallLayer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sMServiceClient) SubscribeSMNotifications(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (SMService_SubscribeSMNotificationsClient, error) {
	stream, err := c.cc.NewStream(ctx, &SMService_ServiceDesc.Streams[0], "/servicemanager.v2.SMService/SubscribeSMNotifications", opts...)
	if err != nil {
		return nil, err
	}
	x := &sMServiceSubscribeSMNotificationsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SMService_SubscribeSMNotificationsClient interface {
	Recv() (*SMNotifications, error)
	grpc.ClientStream
}

type sMServiceSubscribeSMNotificationsClient struct {
	grpc.ClientStream
}

func (x *sMServiceSubscribeSMNotificationsClient) Recv() (*SMNotifications, error) {
	m := new(SMNotifications)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *sMServiceClient) GetSystemLog(ctx context.Context, in *SystemLogRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/servicemanager.v2.SMService/GetSystemLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sMServiceClient) GetServiceLog(ctx context.Context, in *ServiceLogRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/servicemanager.v2.SMService/GetServiceLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sMServiceClient) GetServiceCrashLog(ctx context.Context, in *ServiceLogRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/servicemanager.v2.SMService/GetServiceCrashLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SMServiceServer is the server API for SMService service.
// All implementations must embed UnimplementedSMServiceServer
// for forward compatibility
type SMServiceServer interface {
	// Board config
	GetBoardConfigStatus(context.Context, *empty.Empty) (*BoardConfigStatus, error)
	CheckBoardConfig(context.Context, *BoardConfig) (*BoardConfigStatus, error)
	SetBoardConfig(context.Context, *BoardConfig) (*empty.Empty, error)
	// Services
	GetServicesStatus(context.Context, *empty.Empty) (*ServicesStatus, error)
	InstallService(context.Context, *InstallServiceRequest) (*empty.Empty, error)
	RunServices(context.Context, *RunServicesRequest) (*RunServicesStatus, error)
	GetInstancesStatus(context.Context, *empty.Empty) (*InstancesStatus, error)
	ServiceStateAcceptance(context.Context, *StateAcceptance) (*empty.Empty, error)
	SetServiceState(context.Context, *ServiceState) (*empty.Empty, error)
	OverrideEnvVars(context.Context, *OverrideEnvVarsRequest) (*OverrideEnvVarStatus, error)
	// Layers
	GetLayersStatus(context.Context, *empty.Empty) (*LayersStatus, error)
	InstallLayer(context.Context, *InstallLayerRequest) (*empty.Empty, error)
	// Notifications
	SubscribeSMNotifications(*empty.Empty, SMService_SubscribeSMNotificationsServer) error
	// Logs
	GetSystemLog(context.Context, *SystemLogRequest) (*empty.Empty, error)
	GetServiceLog(context.Context, *ServiceLogRequest) (*empty.Empty, error)
	GetServiceCrashLog(context.Context, *ServiceLogRequest) (*empty.Empty, error)
	mustEmbedUnimplementedSMServiceServer()
}

// UnimplementedSMServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSMServiceServer struct {
}

func (UnimplementedSMServiceServer) GetBoardConfigStatus(context.Context, *empty.Empty) (*BoardConfigStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBoardConfigStatus not implemented")
}
func (UnimplementedSMServiceServer) CheckBoardConfig(context.Context, *BoardConfig) (*BoardConfigStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckBoardConfig not implemented")
}
func (UnimplementedSMServiceServer) SetBoardConfig(context.Context, *BoardConfig) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetBoardConfig not implemented")
}
func (UnimplementedSMServiceServer) GetServicesStatus(context.Context, *empty.Empty) (*ServicesStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServicesStatus not implemented")
}
func (UnimplementedSMServiceServer) InstallService(context.Context, *InstallServiceRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InstallService not implemented")
}
func (UnimplementedSMServiceServer) RunServices(context.Context, *RunServicesRequest) (*RunServicesStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunServices not implemented")
}
func (UnimplementedSMServiceServer) GetInstancesStatus(context.Context, *empty.Empty) (*InstancesStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInstancesStatus not implemented")
}
func (UnimplementedSMServiceServer) ServiceStateAcceptance(context.Context, *StateAcceptance) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServiceStateAcceptance not implemented")
}
func (UnimplementedSMServiceServer) SetServiceState(context.Context, *ServiceState) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetServiceState not implemented")
}
func (UnimplementedSMServiceServer) OverrideEnvVars(context.Context, *OverrideEnvVarsRequest) (*OverrideEnvVarStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OverrideEnvVars not implemented")
}
func (UnimplementedSMServiceServer) GetLayersStatus(context.Context, *empty.Empty) (*LayersStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLayersStatus not implemented")
}
func (UnimplementedSMServiceServer) InstallLayer(context.Context, *InstallLayerRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InstallLayer not implemented")
}
func (UnimplementedSMServiceServer) SubscribeSMNotifications(*empty.Empty, SMService_SubscribeSMNotificationsServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeSMNotifications not implemented")
}
func (UnimplementedSMServiceServer) GetSystemLog(context.Context, *SystemLogRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSystemLog not implemented")
}
func (UnimplementedSMServiceServer) GetServiceLog(context.Context, *ServiceLogRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceLog not implemented")
}
func (UnimplementedSMServiceServer) GetServiceCrashLog(context.Context, *ServiceLogRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceCrashLog not implemented")
}
func (UnimplementedSMServiceServer) mustEmbedUnimplementedSMServiceServer() {}

// UnsafeSMServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SMServiceServer will
// result in compilation errors.
type UnsafeSMServiceServer interface {
	mustEmbedUnimplementedSMServiceServer()
}

func RegisterSMServiceServer(s grpc.ServiceRegistrar, srv SMServiceServer) {
	s.RegisterService(&SMService_ServiceDesc, srv)
}

func _SMService_GetBoardConfigStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SMServiceServer).GetBoardConfigStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/servicemanager.v2.SMService/GetBoardConfigStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SMServiceServer).GetBoardConfigStatus(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SMService_CheckBoardConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BoardConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SMServiceServer).CheckBoardConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/servicemanager.v2.SMService/CheckBoardConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SMServiceServer).CheckBoardConfig(ctx, req.(*BoardConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _SMService_SetBoardConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BoardConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SMServiceServer).SetBoardConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/servicemanager.v2.SMService/SetBoardConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SMServiceServer).SetBoardConfig(ctx, req.(*BoardConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _SMService_GetServicesStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SMServiceServer).GetServicesStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/servicemanager.v2.SMService/GetServicesStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SMServiceServer).GetServicesStatus(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SMService_InstallService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstallServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SMServiceServer).InstallService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/servicemanager.v2.SMService/InstallService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SMServiceServer).InstallService(ctx, req.(*InstallServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SMService_RunServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunServicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SMServiceServer).RunServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/servicemanager.v2.SMService/RunServices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SMServiceServer).RunServices(ctx, req.(*RunServicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SMService_GetInstancesStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SMServiceServer).GetInstancesStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/servicemanager.v2.SMService/GetInstancesStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SMServiceServer).GetInstancesStatus(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SMService_ServiceStateAcceptance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StateAcceptance)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SMServiceServer).ServiceStateAcceptance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/servicemanager.v2.SMService/ServiceStateAcceptance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SMServiceServer).ServiceStateAcceptance(ctx, req.(*StateAcceptance))
	}
	return interceptor(ctx, in, info, handler)
}

func _SMService_SetServiceState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceState)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SMServiceServer).SetServiceState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/servicemanager.v2.SMService/SetServiceState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SMServiceServer).SetServiceState(ctx, req.(*ServiceState))
	}
	return interceptor(ctx, in, info, handler)
}

func _SMService_OverrideEnvVars_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OverrideEnvVarsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SMServiceServer).OverrideEnvVars(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/servicemanager.v2.SMService/OverrideEnvVars",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SMServiceServer).OverrideEnvVars(ctx, req.(*OverrideEnvVarsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SMService_GetLayersStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SMServiceServer).GetLayersStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/servicemanager.v2.SMService/GetLayersStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SMServiceServer).GetLayersStatus(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SMService_InstallLayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstallLayerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SMServiceServer).InstallLayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/servicemanager.v2.SMService/InstallLayer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SMServiceServer).InstallLayer(ctx, req.(*InstallLayerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SMService_SubscribeSMNotifications_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SMServiceServer).SubscribeSMNotifications(m, &sMServiceSubscribeSMNotificationsServer{stream})
}

type SMService_SubscribeSMNotificationsServer interface {
	Send(*SMNotifications) error
	grpc.ServerStream
}

type sMServiceSubscribeSMNotificationsServer struct {
	grpc.ServerStream
}

func (x *sMServiceSubscribeSMNotificationsServer) Send(m *SMNotifications) error {
	return x.ServerStream.SendMsg(m)
}

func _SMService_GetSystemLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SMServiceServer).GetSystemLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/servicemanager.v2.SMService/GetSystemLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SMServiceServer).GetSystemLog(ctx, req.(*SystemLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SMService_GetServiceLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SMServiceServer).GetServiceLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/servicemanager.v2.SMService/GetServiceLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SMServiceServer).GetServiceLog(ctx, req.(*ServiceLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SMService_GetServiceCrashLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SMServiceServer).GetServiceCrashLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/servicemanager.v2.SMService/GetServiceCrashLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SMServiceServer).GetServiceCrashLog(ctx, req.(*ServiceLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SMService_ServiceDesc is the grpc.ServiceDesc for SMService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SMService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "servicemanager.v2.SMService",
	HandlerType: (*SMServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBoardConfigStatus",
			Handler:    _SMService_GetBoardConfigStatus_Handler,
		},
		{
			MethodName: "CheckBoardConfig",
			Handler:    _SMService_CheckBoardConfig_Handler,
		},
		{
			MethodName: "SetBoardConfig",
			Handler:    _SMService_SetBoardConfig_Handler,
		},
		{
			MethodName: "GetServicesStatus",
			Handler:    _SMService_GetServicesStatus_Handler,
		},
		{
			MethodName: "InstallService",
			Handler:    _SMService_InstallService_Handler,
		},
		{
			MethodName: "RunServices",
			Handler:    _SMService_RunServices_Handler,
		},
		{
			MethodName: "GetInstancesStatus",
			Handler:    _SMService_GetInstancesStatus_Handler,
		},
		{
			MethodName: "ServiceStateAcceptance",
			Handler:    _SMService_ServiceStateAcceptance_Handler,
		},
		{
			MethodName: "SetServiceState",
			Handler:    _SMService_SetServiceState_Handler,
		},
		{
			MethodName: "OverrideEnvVars",
			Handler:    _SMService_OverrideEnvVars_Handler,
		},
		{
			MethodName: "GetLayersStatus",
			Handler:    _SMService_GetLayersStatus_Handler,
		},
		{
			MethodName: "InstallLayer",
			Handler:    _SMService_InstallLayer_Handler,
		},
		{
			MethodName: "GetSystemLog",
			Handler:    _SMService_GetSystemLog_Handler,
		},
		{
			MethodName: "GetServiceLog",
			Handler:    _SMService_GetServiceLog_Handler,
		},
		{
			MethodName: "GetServiceCrashLog",
			Handler:    _SMService_GetServiceCrashLog_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeSMNotifications",
			Handler:       _SMService_SubscribeSMNotifications_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "servicemanager/v2/servicemanager.proto",
}
